[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dataqa"
version = "0.1.0"
description = "A composable data agent framework for natural language data interaction"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "DataQA Team", email = "team@dataqa.dev"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    # Core framework
    "pydantic>=2.10.0,<3.0.0",
    "pyyaml>=6.0.1",
    # LangGraph for orchestration (latest versions)
    "langgraph>=0.5.3",
    "langchain-core>=0.3.8",
    "langgraph-checkpoint>=2.0.23",
    "langgraph-sdk>=0.1.66",
    # Data handling
    "pandas>=2.2.0",
    "duckdb>=1.1.0",
    # Visualization
    "matplotlib>=3.9.0",
    "seaborn>=0.13.0",
    # Knowledge base (local)
    "faiss-cpu>=1.8.0",
    "sentence-transformers>=3.0.0",
    # LLM interfaces
    "openai>=1.54.0",
    "anthropic>=0.40.0",
    # CLI tools
    "typer>=0.15.0",
    "rich>=13.9.0",
    # Utilities
    "python-dotenv>=1.0.1",
    "httpx>=0.28.0",
    "tenacity>=9.0.0",
    "orjson>=3.10.0",
    "gitingest>=0.1.5",
]

[project.optional-dependencies]
opensearch = [
    "opensearch-py>=2.4.0",
]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.3.0",
    "psutil>=5.9.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
    "langgraph-cli[inmem]>=0.2.11",
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
]

[project.scripts]
dataqa = "dataqa.cli:main"

[project.urls]
Homepage = "https://github.com/dataqa/dataqa"
Documentation = "https://docs.dataqa.dev"
Repository = "https://github.com/dataqa/dataqa"
Issues = "https://github.com/dataqa/dataqa/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/dataqa"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "sentence_transformers.*",
    "duckdb.*",
    "matplotlib.*",
    "seaborn.*",
    "langgraph.*",
    "langchain_core.*",
]
ignore_missing_imports = true

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
    "langgraph-cli[inmem]>=0.2.11",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/dataqa",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests for quick feedback",
    "regression: marks tests as regression tests for stability",
    "performance_gate: marks tests as performance quality gates",
    "ci_cd: marks tests as full CI/CD integration tests",
    "benchmark: marks tests as performance benchmarks",
]
