# dataqa/templates/cwd_agent_structure_template.yml
# This file defines the generic STRUCTURE of a CWD Agent.
# It is used by the DBC_CWDAgentFactory to build an agent instance.
# It should NOT contain any use-case-specific content or environment secrets.

agent_name: "CwdAgentDBC"

# --- LLM Configuration ---
# This section defines logical placeholders for LLMs. The actual LLM implementation
# (the DBCLLMAdapter) will be injected by the factory. This structure is
# needed to satisfy the Pydantic model and provide a mapping schema.
llm_configs:
  default_llm:
    type: "dataqa.integrations.dbc.llm.DBCLLMAdapter"
    config: {}
  planner_llm:
    type: "dataqa.integrations.dbc.llm.DBCLLMAdapter"
    config: {}
  replanner_llm:
    type: "dataqa.integrations.dbc.llm.DBCLLMAdapter"
    config: {}
  retrieval_worker_llm:
    type: "dataqa.integrations.dbc.llm.DBCLLMAdapter"
    config: {}
  analytics_worker_llm:
    type: "dataqa.integrations.dbc.llm.DBCLLMAdapter"
    config: {}
  plot_worker_llm:
    type: "dataqa.integrations.dbc.llm.DBCLLMAdapter"
    config: {}

# This mapping is a core part of the agent's structure. It tells the agent
# which logical LLM to use for each component.
llm:
  default: default_llm
  planner: planner_llm
  replanner: replanner_llm
  retrieval_worker: retrieval_worker_llm
  analytics_worker: analytics_worker_llm
  plot_worker: plot_worker_llm

# --- Component Configuration ---
# These sections are placeholders to ensure the config validates against the
# CwdAgentDefinitionConfig model. The actual components are built and injected by the factory.
resource_manager_config:
  type: "dataqa.core.components.resource_manager.resource_manager.ResourceManager"
  config: {}

# The retriever's configuration is structural. It specifies the "AllRetriever" strategy,
# which is a key part of this agent's design.
retriever_config:
  type: dataqa.core.components.retriever.base_retriever.AllRetriever
  config:
    name: all_retriever
    retrieval_method: "all"
    resource_types:
      - rule
      - schema
      - example
    module_names:
      - planner
      - replanner
      - retrieval_worker
      - analytics_worker
      - plot_worker

# The worker config is also structural. The `sql_execution_config` is needed by the model,
# but `data_files` is empty because the DBCSQLExecutor doesn't use local files.
workers:
  retrieval_worker:
    sql_execution_config:
      name: "sql_executor"
      data_files: []
  analytics_worker: {}
  plot_worker: {}

# --- Runtime Parameters ---
# These define default runtime behaviors for the agent.
max_tasks: 10
timeout: 300

# --- Content Placeholders ---
# These values will be dynamically overridden at runtime by the DBC_CWDAgentFactory
# using the information from the UsecaseConfig object.
use_case_name: "placeholder_name"
use_case_description: "placeholder_description"